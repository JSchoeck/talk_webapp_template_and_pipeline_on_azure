parameters:
  - name: projectId
    type: string
  - name: projectName
    type: string
  - name: armConnection
    type: string
  - name: appName
    type: string

stages:
- stage: Authentication
  displayName: 'Authentication'
  dependsOn: 
  - Build
  - DeployBicep
  - DeployApp
  condition: succeeded('DeployApp')
  variables:
    projectId: ${{ parameters.projectId }}
    projectName: ${{ parameters.projectName }}
    resourceGroupName: 'rg-$(projectId)-$(projectName)'
    appName:  ${{ parameters.appName }}
    azureSubscription: ${{ parameters.armConnection }}
                                                                                                                                                                                                             
  jobs:
    - job: AddingIdentityProvider
      pool:
        vmImage: $(vmImageName)
      steps:     
      - task: AzureCLI@2
        inputs:
          azureSubscription: ${{ variables.azureSubscription }}
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az account show
            subscriptionId=$(az account list --query "[?isDefault].id" -o tsv)
            echo $subscriptionId
            echo $(appName)

            #check if the app already exists in Entra ID

            set -e
            set -x

            tenantId=$(az account show --query tenantId -o tsv)
            echo "Tenant ID: $tenantId"

            appName=$(appName)

            appId=$(az ad app list --display-name $appName --query "[0].appId" -o tsv)
            echo "App ID: $appId"

            redirectUri="https://$(appName).azurewebsites.net/.auth/login/aad/callback"
            homePageUrl="https://$(appName).azurewebsites.net"
            issuer="https://sts.windows.net/$tenantId/v2.0"

            
            # Required resource access.  Access Microsoft Graph with delegated User.Read permissions.
            cat > manifest.json << EOF
            [
                {
                    "resourceAppId": "<ADD_YOUR_AppId_ID_HERE",
                    "resourceAccess": [
                        {
                            "id": "<ADD_YOUR_PERMISSION_ID_HERE>",
                            "type": "Scope"
                        }
                    ]
                }
            ]
            EOF
            
            if [ -z "$appId" ]; then
              echo "App registration does not exist. Creating a new one."

              # Create app registration for App Service authentication
              appId=$(az ad app create --display-name $(appName) --sign-in-audience AzureADMyOrg --enable-id-token-issuance true --query appId --output tsv)
              echo "Created app registration $appId"
              
              # Set identifier URI, homepage, redirect URI, and resource access
              az ad app update --id $appId --identifier-uris api://$appId --web-redirect-uris $redirectUri  --web-home-page-url $homePageUrl --required-resource-accesses @manifest.json
              echo "Updated app $appId"
 
            else
              echo "App registration already exists. Skipping creation."
            fi

            # Adding Client Secret
            clientSecret=$(az ad app credential reset --id $appId --append --display-name "generated by ADO Pipeline deployment" --years 2 --query password --output tsv)            
            echo "Client secret: $clientSecret"

            az config set extension.use_dynamic_install=yes_without_prompt
            az extension add --name authV2              

            # Adding the client secret to web app settings Enviroment variables
            az webapp config appsettings set --resource-group $(resourceGroupName) --name $(appName) --slot-settings MICROSOFT_PROVIDER_AUTHENTICATION_SECRET=$clientSecret
            echo "Added client secret to web app $(appName) settings"

            # Adding "WEBSITE_AUTH_AAD_ALLOWED_TENANTS" to web app settings, to set Tenanant requirement to Allow requests only from the issuer tenant
            az webapp config appsettings set --resource-group $(resourceGroupName) --name $(appName) --slot-settings WEBSITE_AUTH_AAD_ALLOWED_TENANTS=$tenantId

            # Assigning the app registration to the App Service
            # Enable authentication and set the issuer URL
            az webapp auth update --name $(appName) --resource-group $(resourceGroupName) --enabled true 
            az webapp auth microsoft update --name $(appName) --resource-group $(resourceGroupName) --client-id $appId --client-secret $clientSecret --issuer $issuer -y
            az webapp auth microsoft update --name $(appName) --resource-group $(resourceGroupName) --secret-setting MICROSOFT_PROVIDER_AUTHENTICATION_SECRET -y
            # Authentication settings for the web app
            az webapp auth update --name $(appName) --resource-group $(resourceGroupName) --action RedirectToLoginPage --enable-token-store true --redirect-provider azureactivedirectory
            echo "Assigned app registration $appId to web app $(appName)"

            # Configure backend App Service to accept a token only from the frontend App Service
            authSettings=$(az webapp auth show -g $(resourceGroupName) -n $(appName))
            authSettings=$(echo "$authSettings" | jq '.properties' | jq --arg appId "$appId" '.identityProviders.azureActiveDirectory.validation.defaultAuthorizationPolicy.allowedApplications += [$appId]')
            az webapp auth set --resource-group $(resourceGroupName) --name $(appName) --body "$authSettings"


            # create a service principal for the app registration
            servicePrincipalobjectId=$(az ad sp list --display-name $(appName) --query "[].id" --output tsv)
            echo "Service principal $servicePrincipalobjectId created for app registration $appId"

            if [ -z "$servicePrincipalobjectId" ]; then
              echo "Service principal does not exist. Creating a new one."
              servicePrincipalobjectId=$(az ad sp create --id $appId --query id --output tsv)
              echo "Created service principal $servicePrincipalobjectId"

              echo "Adding usergroup_datascience_app_ds_team Group to $servicePrincipalobjectId"

              az ad sp update --id $servicePrincipalobjectId --set appRoleAssignmentRequired=true

              groupId=$(az ad group list --display-name usergroup_datascience_app_ds_team --query "[0].id" -o tsv)

              az rest --method post --uri https://graph.microsoft.com/v1.0/groups/$groupId/appRoleAssignments --body "{\"principalId\": \"$groupId\",\"resourceId\": \"$servicePrincipalobjectId\",\"appRoleId\": \"00000000-0000-0000-0000-000000000000\"}" --headers "Content-Type=application/json"
              echo "Added user group 'usergroup_datascience_app_ds_team' to the app registration"
            else
              echo "Service principal already exists. Skipping creation."
            fi

        displayName: 'Configure Web App Access and App Registration'
